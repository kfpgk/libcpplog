@startuml logger-class-diagram

title libcpplog logger class diagram

enum LogLevel {
    Info
    Warning
    Error
}
hide LogLevel methods

enum LogComponent {
    LogLevel
    Context
    ContextLong
    TimeStamp
}

class LogStream {
    == public ==
    + LogStream()
    + LogStream(LogLevel)
    ..
    + {static} context() : source_location
    + {static} timeStamp : LogStream::TimeStamp
    == private ==
    - location : source_location
    - logLevel : LogLevel
}

class LogFormat {
    == public ==
    + LogFormat(LogComponent...)
    + LogFormat(LogComponent[ ])
    ..
    + begin() : LogComponent*
    + end() : LogComponent*
    ..
    + {static} defaultValue() : LogFormat
    == private ==
    - components : LogComponent[ ]
}

class Logger {
    == public ==
    + Logger(ostream&, LogFormat)
    ..
    + setOutput(ostream&) : void
    + setFormat(LogFormat) : void
    ..
    + log(string) : void
    + log(LogLevel, string) : void
    + logOnce(string) : void
    + logOnce(LogLevel, string) : void
    ..
    + operator<<(string) : Logger&
    + operator<<(float) : Logger&
    + operator<<(enum LogStream) : Logger&
    + operator<<(enum LogLevel) : Logger&
    + operator<<(LogStream::TimeStamp) : Logger&
    + operator<<(source_location) : Logger&
    == private ==
    - pImpl : Logger::Impl*
}

class "<<globals>>" as globals << (G,#FF77FF) >> {
    logger : Logger
    ..
    setOutput(ostream&) : void
    setFormat(LogFormat) : void
    ..
    log(string) : void
    log(LogLevel, string) : void
    logOnce(string) : void
    logOnce(LogLevel, string) : void
}

class "Logger::Impl" as LoggerImpl {
    == public ==
    + Logger::Impl(ostream&, LogFormat)
    ..
    + setOutput(ostream&) : void
    + setFormat(LogFormat) : void
    ..
    + log(string) : void
    + log(LogLevel, string) : void
    + logOnce(string) : void
    + logOnce(LogLevel, string) : void
    ..
    + operator<< <T>(T) : Logger::Impl&
    + operator<<(enum LogStream) : Logger::Impl&
    + operator<<(enum LogLevel) : Logger::Impl&
    + operator<<(LogStream::TimeStamp) : Logger::Impl&
    + operator<<(source_location) : Logger::Impl&
    == private ==
    - outputStream : ostream&
    - outMutex : mutex
    - loggedOnceMessages : string[ ]
    - mutexForLoggedMsg : mutex
    - format : LogFormat
    --
    - buildMessageKey(string, location) : string
    - constructLogMessage(LogLevel, string, LogFormat, source_location) : string
}

Logger "1" o-- "1" LoggerImpl

LogLevel - Logger
LogComponent - Logger
LogStream - Logger

LogLevel - LoggerImpl
LogComponent - LoggerImpl
LogStreamComponent - LoggerImpl

LogLevel -left- globals
LogComponent -left- globals
LogStreamComponent -left- globals

Logger - LogFormat
LoggerImpl - LogFormat 
globals - LogFormat

globals -> Logger

@enduml