@startuml logger-class-diagram

title libcpplog logger class diagram (cpplog::logger)

enum LogLevel {
    Error
    Info
    Result
    Warning
}
hide LogLevel methods

enum LogComponent {
    LogLevel
    Context
    ContextLong
    TimeStamp
}
hide LogComponent methods

class LogStream {
    == public ==
    + LogStream()
    + LogStream(LogLevel)
    ..
    + {static} logLevel() : LogLevel
    + {static} logLevel(LogLevel) : LogLevel
    + {static} context() : source_location
    + {static} timeStamp : LogStream::TimeStamp
    == private ==
    - location : source_location
    - logLevelAttribute : LogLevel
}

class LogFormat {
    == public ==
    + LogFormat(LogComponent...)
    + LogFormat(LogComponent[ ])
    ..
    + begin() : LogComponent*
    + end() : LogComponent*
    ..
    + {static} defaultValue() : LogFormat
    == private ==
    - components : LogComponent[ ]
}

package Logger as LoggerPackage {
    class Logger {
        == public ==
        + Logger(ostream&, LogFormat)
        ..
        + setOutput(ostream&) : void
        + setFormat(LogFormat) : void
        ..
        + log(string) : void
        + log(LogLevel, string) : void
        + logOnce(string) : void
        + logOnce(LogLevel, string) : void
        ..
        + operator<<(string) : Logger&
        + operator<<(float) : Logger&
        + operator<<(enum LogStream) : Logger&
        + operator<<(enum LogLevel) : Logger&
        + operator<<(LogStream::TimeStamp) : Logger&
        + operator<<(source_location) : Logger&
        == private ==
        - pImpl : Logger::Impl*
    }

    class "Logger::Impl" as LoggerImpl {
        == public ==
        + Logger::Impl(ostream&, LogFormat)
        ..
        + setOutput(ostream&) : void
        + setFormat(LogFormat) : void
        ..
        + log(string) : void
        + log(LogLevel, string) : void
        + logOnce(string) : void
        + logOnce(LogLevel, string) : void
        ..
        + operator<< <T>(T) : Logger::Impl&
        + operator<<(enum LogStream) : Logger::Impl&
        + operator<<(enum LogLevel) : Logger::Impl&
        + operator<<(LogStream::TimeStamp) : Logger::Impl&
        + operator<<(source_location) : Logger::Impl&
        == private ==
        - outputStream : ostream&
        - outMutex : mutex
        - loggedOnceMessages : string[ ]
        - mutexForLoggedMsg : mutex
        - format : LogFormat
        --
        - buildMessageKey(string, location) : string
        - constructLogMessage(LogLevel, string, LogFormat, source_location) : string
    }
}


class "<<globals>>" as globals << (G,#FF77FF) >> {
    logger : Logger
    ..
    setOutput(ostream&) : void
    setFormat(LogFormat) : void
    ..
    log(string) : void
    log(LogLevel, string) : void
    logOnce(string) : void
    logOnce(LogLevel, string) : void
}

Logger "1" o-- "1" LoggerImpl

LogFormat - LoggerPackage
LogLevel - LoggerPackage
LogComponent - LoggerPackage

LoggerPackage -- LogStream

globals - LogFormat
globals - LogLevel
globals - LogComponent

LogFormat -[hidden]down-> LogLevel
LogLevel -[hidden]down-> LogComponent

globals -left-> LoggerPackage

@enduml